/* selector {
    propiedades: valor 
} */

/*  selector universal 
* {
    propiedades: valor 
} */

/*  selector etiqueta
h1 {
    propiedades: valor 
} */

/*  selector por clase 
.nombreclase {
    propiedades: valor 
} */

/*  selector por ID 
#id-del-elemento {
    propiedades: valor 
} */

/*  selector por atributo
[nombreatributo = "valoratributo"] {
    propiedades: valor 
} */

/*  selector mixto
h2 p {  (selecciona solo los p que están dentro de un h2)
    propiedades: valor 
} */

/*  pseudo clase (cuando paso el mouse: hover,)
h2 p {  
    propiedades: valor 
} */

/* especifidad 
!important > estilos en linea > ids > clases, pseudo clases, atributos > elementos, pseudo elementos 
*/

/* metodología BEM 
(se recomienda hacer todos las familias de la misma clase) 
.nombreclase_input--nombre (--nombre si queremos darselo a alguno especial que se repite) 
*/

/* unidades de medida 
    medidas fijas: 
        font-size: xpx- cm - mm - pt 
    medidas relativas: 
        font size: x em (1em = 5px)
        En el nombre de la clase NO especifica se puede cambiar cuanto es un em 
        width: 100vw (lo pone a pantalla completa)
        heiht: 100 vh (lo pone vertical completo)
*/

/* propiedades de texto : font_properties
    font-size:
    font-family:
    line-height: altura de la letra
    font-weight: gordo de la letra
    font-strect: normal - condensed
*/

/* tipos de caja
    Puedo cambiar si quiero que h2 sea elemento en bloque o elemento en linea (ocupara el espacio del contenido)
    display: inline 
    propiedades de caja:
        background-color: 
        padding: (distancia entre caja y texto) top - right - bottom - left 
        height: 
        width 
        box-sizing: border-box
        text-align: center
        margin: (distancia que separa las cajas) funciona igual que el padding.
        border-radius: (redondea)
        border - 
        box-shadow: ejex ejey desenfoque borde #color
        text-shadow: ejex ejey difuminado #color, se puede duplicar para aumentar intensidad
        transform: rotate(xdeg)
*/

/* OUTLINE
    Es similar al border pero no ocupa espacio, como cuando el input se pone "azul" por defecto cuando queremos escribir algo
    Sirve para ver donde están los bordes de mis cajas
*/

/*POSITION (static - relative - absolute - fixed - sticky)
    position: relative : Puedo mover la caja pero su espacio ocupado en la pantalla sigue siendo el mismo
    (cuando posicionamos le damos top, left, right, bottom, donde top y left tienen prioridad sobre las otras.) 
    z-index: los ordena en el eje Z para poner profundidad (entre más alto mas adelante, por defecto es 0) tiene problemas de padre hijo, al hijo tienes que ponerle -1. 
    POSITION ABSOLUTE: Hace que se desocupe el espacio reservado por la caja  (caja de abajo sube) para centrar todo 0 y margin 0.
    POSITION FIXED: No ocupa espacio en pantalla pero queda fijo en un lugar, como para los menú de arriba
    POSITION STICKY: Conserva el espacio como relative. Funciona como fixed al momento que nosotro queramos

*/

/* DISPLAY: modifica el comportamiento de las cajas (block - inline - table - list - cell - gird - flex)
    inline-block: podemos modificar las dimensiones de la caja

*/

/* OVERFLOW: Hace que las cosas no se sobresalgan 
    overflow: auto (pone una barra para scrolear si se sala de la caja) 
*/

/* FLOAT: 
    Para poner fotos y texto en un contenedor y que quede bonito
*/

/* Psueudo-elementos: se aplican a los elementos y sirven para cambiar características más especificas
    ::first-line -> cambia la primera linea (block)
    ::first-letter -> cambia la primera letra como en los libros (block)
    ::placeholder -> cambia lo que viene predeterminado en el input
    ::after -> Pongo cuestiones despues de un elemento, el content es necesario (hijos - content - inline)
    ::before ->Pongo cuestiones antes de un elemento, el content también es necesario (hijos - content - inline)
*/

/* Pseudo-clases: Escucha elementos 
    :hover -> cuando está el mouse encima
    :link -> cambiar un link que aún no visitamos (etiqueta a)
    :visited -> cambia estilo de un link que ya visité (etiqueta a) 
    :active -> Al dejar apretado un boton cambio el estilo
    :focus -> cuando selecciono el input le puedo dar un estilo (lo tengo enfocado)
    :lang -> función para cambiar el lenguaje
*/

/* Object-Fit: Para modificar imagenes 
    contain: resoluciones de imagen se ajustan al contenido
    cover: Imagen se ajuste al contenedor y recorta lo que sobra 
    none: por defecto pone las orignales 
    scale-down: se queda con la que más le conviene 
Object-position: qué parte de la imagen quiero que se muestre mas
    left - right - top - bottom 
    podemos darles medidas también 
*/

/* FLEXBOX: Sirve para adaptar resoluciones a distintos dispositivos
    --PROPIEDADES CONTENEDORES--
    flex-direction: permite cambiar la orientación del eje x (main) y el eje y (cross) -> Se aplica al contenedor para afectar a los items.
        row y reverse: como fila
        column y reverse: como columna
    flex-wrap: hace que se repte el ancho y alto de las cajas -> Tmb se aplica en el container
    justify-content: para justificar las cakas
        center: las centra
        space-around: ocupa toda la pagina
        space-beetwen: no deja margen en las cajas de los costados
        space-evenly: hace que todos los márgenes sean iguales
    align-items - content (content cuando hay mas de una linea) : 
        strech: por defecto: si no hay alto se ajusta en todo el eje cross
        flex-start: lo pone a lo mas arriba
        center: centra verticalmente
        flex-end: lo pone al final
        baseline: los pone a lo mas al final
    --PROPIEDADES ITEMS--
    align-self: para alinear, funciona igual que align-items pero es especifico
    margin: 
    flex-grow: hace que se ajusten los items a el espacio sobrante de la pantalla, señala cuanto ganan
    flex-shrink: se ajustan al espacio sobrante, pero señala cuanto tienen q ceder
    flex-basis: para darle un width especifico
    order: z index pero en el main axis
*/

/*-----GRID-------- Para trsabajar en el layout con grillas
    ---APLICADOS A GRID CONTAINER----
        grid-template-rows -> le doy las medidas de las filas que quiero
        grid-template-columns -> le doy las medidas de las columnas que quiero 
            fr: hace que se estire como flex grow
            repeat(cantidad,tamano) -> sirve pa que repita la wea
        grid-row-gap -> separa un margen en filas
        grid-column-gap -> separa un margen en columnas 
        grid-gap: row column -> ojo que no separa con los bordes de la grilla
    ---APLICADOS A GRID ITEMS----
        grid-row-start/end -> donde empieza/donde termina 
        grid-column-start/end -> donde empieza/donde termina 
            span -> sirve pa decirle cuantas filas/columnas queremos saltarnos
*/
/*---GRID IMPLICITO Y EXPLICITO---
    implicito -> cuando una caja empuja a otra y queda abajo del layout explicito
    grid-auto-rows/columns
    grid-auto-flow -> ponemos si el implicito lo queremos como columna o fila
        dense: rellena los huecos vacios
*/

/*---GRID DINAMICO--- -> Tiene estructuras autoajustables
    minmax(minimo,maximo) -> por lo general se pone en el repeat para dar medidas
    auto-fill -> tmb se pone en la cantidad de repeat pa que se llenen los espacios
    auto-fit -> parecido pero se ajusta a la escala
*/

/*---ALINEACION Y CONTROL DE FLUJO---- 
    justify-item -> mueve items horizonatlmente: start/end/center/strecth
    align-items -> mueve items verticalmente: start/end/center/stretch
    justify-content -> mueve columnas horizontalmente
    align-content -> mueve filas verticalmente
    ---APLICADO A ITEMS---
        align-self
        justify-self
    ---AREAS---
    grid-template-areas -> asigna las areas continuas que quiero: "seccion seccion ...."
    grid-area -> hacemos que se ocupe el espacio en el area deseada "nombreseccion"
*/

/*---RESPONSIVE DESIGN----
    @media and screen (min-width: xpx)
*/

/*---TRANSICIONES---
    transition-property -> cambia una propiedad: lapropiedadquequeramoscambiar
    transition-duration: xseg
    transition-delay
---ANIMACIONES---
    @keypropertie #nombre {
        from {
        
        to {
    importante en la caja darle:
            animation-name: #nombre
            animation-duration: #duracion
            animation-timing-function: #funciondecomosemueve 
            animation-iteration-count: #numrepeticioness
            animation-direction: normal/iterate/reverse
            animation-fill-mode -> como quiero que termine: none/ forwards/ both
---TRANSFORM---
            scaleX/Y
            translateX/Y
            skew(deg)
            clip-path -> para hacer formas especiales
*/

/*---VARIABLES---
    ---GLOBALES---
    :root{ 
        --nombrevar: 
    }
    ---LOCALES---
    :div{
        --nombrevar:
    }