services: # The containers we are going to run
  api:
    # environment:
    #   - NODE_OPTIONS=--max-old-space-size=4096
    build:
      context: ./ # The path in the machine that have the files, in this case root
      dockerfile: dockerfile # The name of the Dockerfile definition
    container_name: api
    restart: unless-stopped
    volumes:
      - ./src:/app/src # To copy changes in the local machine to the container.
    ports:
      - "3000:3000" # To expose the app to the machine localhost (machine-port:container:port)
    networks:
      - api-db # Connect the app to the network, in this case to use the database
    depends_on: # Build dependencies in case one containers needs another to be builded first
      - db # To build after the database
    env_file:
      - .env
    command:
      - npm mailer # To run the mailer script after the container is builded

  db: # The database service
    image: postgres # Using the oficial dockerhub image
    container_name: db
    ports:
      - "5432:5432" # To expose the database to the machine localhost (machine-port:container:port)
    networks:
      - api-db # Connect to the network to be used by other containers (ej: the web server)
    env_file:
      - .env
    volumes:
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume
      - db-volume:/var/lib/postgresql/data

  mailer:
    build:
      context: ./mailer # The path in the machine that have the files, in this case root
      dockerfile: dockerfile # The name of the Dockerfile definition
    container_name: mailer
    restart: unless-stopped
    volumes:
      - ./mailer/mailer_script.ts:/app/mailer/mailer_script.ts # To copy changes in the local machine to the container.
    ports:
      - "8000:8000" # To expose the app to the machine localhost (machine-port:container:port)
    networks:
      - api-db # Connect the app to the network, in this case to use the database
    depends_on: # Build dependencies in case one containers needs another to be builded first
      - db # To build after the database
      - api
    env_file:
      - .env

networks: # All the networks that connects our containers
  api-db:
    driver: bridge
  
volumes: # All the named volumes needed to persist data after container deletion
  db-volume: